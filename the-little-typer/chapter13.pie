#lang pie

(claim step-+ (-> Nat Nat
                  Nat))
(define step-+
  (lambda (n-1 almost-answer)
    (add1 almost-answer)))

(claim + (-> Nat Nat 
  Nat))
(define +
  (lambda (n m)
    (rec-Nat
      n
      m
      step-+)))

(claim double (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat
      n
      0
      (+ 2))))

(claim Even
  (-> Nat U))
(define Even
  (lambda (nat)
    (Sigma ((half Nat))
      (= Nat nat (double half)))))

(claim Odd
  (-> Nat U))
(define Odd
  (lambda (nat)
    (Sigma ((almost-half Nat))
      (= Nat nat (add1 (double almost-half))))))

(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

(claim if-n-is-even-add1-n-is-odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))
(define if-n-is-even-add1-n-is-odd
  (lambda (n)
    (lambda (half:double-half-equals-nat)
      (cons
        (car half:double-half-equals-nat)
        (cong 
          (cdr half:double-half-equals-nat)
          (+ 1))))))
    
(claim if-n-is-odd-add1-n-is-even
  (Pi ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))
(define if-n-is-odd-add1-n-is-even
  (lambda (n)
    (lambda (almost-half:add1_double-almost-half-equals-nat)
      (cons
        (add1 (car almost-half:add1_double-almost-half-equals-nat))
        (cong 
          (cdr almost-half:add1_double-almost-half-equals-nat)
          (+ 1))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(claim foo/mot
  (-> (Either Atom Nat)
      U))
(define foo/mot
  (lambda (either)
    Atom))

(claim foo 
  (-> (Either Atom Nat)
      Atom))
(define foo
  (lambda (either)
    (ind-Either
      either
      foo/mot
      (lambda (a)
         a)
      (lambda (nat)
         'no-atom))))
      
(foo (left 'test))
(foo (right 2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(claim every-nat-is-either-even-or-odd/mot
  (-> Nat U))
(define every-nat-is-either-even-or-odd/mot
  (lambda (nat)
    (Either (Even nat) (Odd nat))))

(claim every-nat-is-either-even-or-odd/step
  (Pi ((n Nat))
    (-> (Either (Even n) (Odd n))
        (Either (Even (add1 n)) (Odd (add1 n))))))
(define every-nat-is-either-even-or-odd/step
  (lambda (n)
    (lambda (even_n_or_odd_n)
      (ind-Either
         even_n_or_odd_n
         (lambda (either)
           (Either (Even (add1 n)) (Odd (add1 n))))
         (lambda (even_n)
            (right (if-n-is-even-add1-n-is-odd n even_n)))
         (lambda (odd_n)
            (left (if-n-is-odd-add1-n-is-even n odd_n)))))))

(claim every-nat-is-either-even-or-odd
  (Pi ((nat Nat))
    (Either
      (Even nat)
      (Odd nat))))
(define every-nat-is-either-even-or-odd
  (lambda (nat)
    (ind-Nat
      nat
      every-nat-is-either-even-or-odd/mot
      (left zero-is-even)
      every-nat-is-either-even-or-odd/step)))


  
